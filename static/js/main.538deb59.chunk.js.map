{"version":3,"sources":["Database.ts","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["getAllItems","itemListRaw","localStorage","getItem","JSON","parse","error","Colors","borderColor","backgroundColor","name","App","useState","pressed","setPressed","pressPurpose","setPressPurpose","raw","Number","parseFloat","console","log","getMoney","initialAmount","setInitialAmount","amountInputOpen","setAmountInputOpen","tempAmount","setTempAmount","allItems","setAllItems","remainingMoney","setRemainingMoney","updateList","useEffect","money","setItem","toString","setMoney","temp","forEach","element","cost","itemName","setItemName","itemCost","setItemCost","className","type","id","onChange","event","target","value","placeholder","autoComplete","onClick","info","date","Date","color","Math","floor","random","itemList","latestKey","length","stringify","defaultValue","e","autoFocus","style","margin","fontSize","map","toDateString","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.538deb59.chunk.js","sourcesContent":["export interface Info {\n    id?: number;\n    name: string;\n    cost: number;\n    date: Date;\n    color: number;\n}\nexport const setItem = (info: Info): void => {\n    try {\n        const itemListRaw: string | null = localStorage.getItem(\"items\");\n        let itemList: Array<Info>;\n        if (itemListRaw) {\n            itemList = JSON.parse(itemListRaw);\n            const latestKey: number = itemList.length;\n            info.id = latestKey;\n            itemList[latestKey] = info;\n\n            // console.log(info);\n\n            localStorage.setItem(\"items\", JSON.stringify(itemList));\n        } else {\n            info.id = 0;\n            localStorage.setItem(\"items\", JSON.stringify([info]));\n        }\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getAllItems = (): Array<Info> => {\n    try {\n        const itemListRaw = localStorage.getItem(\"items\");\n        if (itemListRaw) {\n            return JSON.parse(itemListRaw);\n        } else {\n            return [];\n        }\n    } catch (error) {\n        return [];\n    }\n};\n\nexport const setMoney = (money: number): void => {\n    try {\n        localStorage.setItem(\"initialMoney\", money.toString());\n    } catch (error) {\n        console.log(error);\n    }\n};\n\nexport const getMoney = (): number | null => {\n    try {\n        const raw = localStorage.getItem(\"initialMoney\");\n        if (raw) {\n            return Number.parseFloat(raw);\n        } else {\n            return null;\n        }\n    } catch (error) {\n        console.log(error);\n        return null;\n    }\n};\n","import React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport \"./App.css\";\nimport { getAllItems, getMoney, Info, setItem, setMoney } from \"./Database\";\n\nconst Colors = [\n    { borderColor: \"#CDE9FF\", backgroundColor: \"#E1F1FF\", name: \"AQUA\" },\n    { borderColor: \"#AFEDA4\", backgroundColor: \"#E5F9E0\", name: \"GREEN\" },\n    { borderColor: \"#FEF2AD\", backgroundColor: \"#FFF7E2\", name: \"YELLOW\" },\n    { borderColor: \"#FECCE5\", backgroundColor: \"#FFE5F2\", name: \"PINK\" },\n    { borderColor: \"#E0B4FF\", backgroundColor: \"#F2E6FE\", name: \"LAVENDER\" },\n    { borderColor: \"#CCCCCC\", backgroundColor: \"#F9F9F9\", name: \"GRAY\" },\n    // { trim: \"#3D3D3D\", background: \"#4F4F4F\", name: \"BLACK\" },\n];\n\nconst App: React.FC = () => {\n    const [pressed, setPressed] = useState<\"y\" | \"n\">(\"n\");\n    const [pressPurpose, setPressPurpose] = useState<\"new\" | \"edit\">(\"new\");\n    const [initialAmount, setInitialAmount] = useState<number | null>(\n        getMoney()\n    );\n    const [amountInputOpen, setAmountInputOpen] = useState<\"y\" | \"n\">(\"n\");\n    const [tempAmount, setTempAmount] = useState<number>();\n    const [allItems, setAllItems] = useState<Array<Info>>(getAllItems());\n\n    const [remainingMoney, setRemainingMoney] = useState<number | null>(null);\n    const updateList = () => {\n        setAllItems(getAllItems());\n    };\n\n    useEffect(() => {\n        initialAmount && setMoney(initialAmount);\n        let temp: number = 0;\n        allItems.forEach((element) => {\n            temp += element.cost;\n        });\n        initialAmount && setRemainingMoney(initialAmount - temp);\n    }, [initialAmount, allItems]);\n\n    const [itemName, setItemName] = useState<string>(\"\");\n    const [itemCost, setItemCost] = useState<string>(\"\");\n\n    return (\n        <div className=\"App\">\n            {pressed === \"y\" && (\n                <div className=\"valueInput\">\n                    <div className=\"itemInfo\">\n                        <input\n                            type=\"text\"\n                            id=\"itemName\"\n                            onChange={(event) => {\n                                setItemName(event.target.value);\n                            }}\n                            placeholder=\"item\"\n                            value={itemName}\n                            autoComplete=\"off\"\n                        />\n                        <div className=\"itemCostDiv\">\n                            <div id=\"currency\">â‚¹</div>\n                            <input\n                                type=\"number\"\n                                id=\"itemCost\"\n                                onChange={(event) => {\n                                    setItemCost(event.target.value);\n                                }}\n                                value={itemCost}\n                                placeholder=\"cost\"\n                                autoComplete=\"off\"\n                            />\n                        </div>\n                    </div>\n                    <div className=\"valueInputButtons\">\n                        <div\n                            id=\"saveButton\"\n                            onClick={() => {\n                                const info: Info = {\n                                    name: itemName,\n                                    cost: Number.parseFloat(itemCost),\n                                    date: new Date(),\n                                    color: Math.floor(Math.random() * 7),\n                                };\n                                itemName && itemCost && setItem(info);\n                                setPressed(\"n\");\n                                updateList();\n                            }}\n                        >\n                            Save\n                        </div>\n                        {pressPurpose === \"edit\" && (\n                            <div\n                                id=\"deleteButton\"\n                                onClick={() => {\n                                    setPressed(\"n\");\n                                }}\n                            >\n                                Delete\n                            </div>\n                        )}\n                    </div>\n                </div>\n            )}\n            <main>\n                <header id=\"header\">\n                    <p>LEGER</p>\n                    {/* <div className=\"themeChanger\" id=\"themeButton\"></div> */}\n                </header>\n                <div id=\"holder\">\n                    {/* Initial amount element start */}\n                    {!initialAmount && amountInputOpen === \"n\" && (\n                        <div id=\"initialAmount\">\n                            <p\n                                id=\"opener\"\n                                onClick={() =>\n                                    setAmountInputOpen(\n                                        amountInputOpen === \"n\" ? \"y\" : \"n\"\n                                    )\n                                }\n                            >\n                                press to enter initial balance\n                            </p>\n                        </div>\n                    )}\n                    {amountInputOpen === \"y\" && (\n                        <div id=\"initialAmount\">\n                            <div className=\"initialAmountBox\">\n                                <p>â‚¹</p>\n                                <input\n                                    type=\"number\"\n                                    id=\"amountElement\"\n                                    placeholder=\"Initial amount\"\n                                    defaultValue={initialAmount?.toString()}\n                                    value={tempAmount}\n                                    onChange={(e) =>\n                                        setTempAmount(\n                                            Number.parseFloat(\n                                                e.target.value.toString()\n                                            )\n                                        )\n                                    }\n                                    autoFocus\n                                    autoComplete=\"off\"\n                                />\n                            </div>\n                            <div\n                                id=\"saveButton1\"\n                                onClick={() => {\n                                    tempAmount && setInitialAmount(tempAmount);\n                                    setAmountInputOpen(\"n\");\n                                    updateList();\n                                }}\n                            >\n                                Save\n                            </div>\n                        </div>\n                    )}\n                    {initialAmount && amountInputOpen === \"n\" && (\n                        <div id=\"initialAmount\">\n                            <div\n                                id=\"opener\"\n                                onClick={() =>\n                                    setAmountInputOpen(\n                                        amountInputOpen === \"n\" ? \"y\" : \"n\"\n                                    )\n                                }\n                            >\n                                <p>Initial Amount</p>\n                                <p\n                                    style={{\n                                        margin: \"0%\",\n                                        fontSize: \"27px\",\n                                    }}\n                                >\n                                    &nbsp;â‚¹{initialAmount}\n                                </p>\n                            </div>\n                        </div>\n                    )}\n                    {/* Initial amount element end */}\n                    {/* <Thing name=\"test\" cost={90} date={new Date()} color={3} /> */}\n                    {allItems.map((info) => (\n                        <div\n                            className=\"thing\"\n                            style={Colors[info.color]}\n                            key={info.id}\n                        >\n                            {/* {console.log(info)} */}\n                            <p className=\"nameAndPrice\">\n                                {info.name} <br />\n                                <br />â‚¹{info.cost}\n                            </p>\n                            <p className=\"date\" style={{ fontSize: \"10px\" }}>\n                                {new Date(info.date).toDateString()}\n                            </p>\n                        </div>\n                    ))}\n                </div>\n                <div\n                    className=\"addButton\"\n                    id=\"addButton\"\n                    onClick={() => {\n                        setPressed(pressed === \"n\" ? \"y\" : \"n\");\n                        setPressPurpose(\"new\");\n                    }}\n                >\n                    +\n                </div>\n                <footer id=\"footer\">\n                    remaining balance &nbsp;\n                    <p id=\"currentBalance\">â‚¹{remainingMoney}</p>\n                </footer>\n            </main>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}