{"version":3,"sources":["InputDialog.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["InputDialog","valueInputdiv","useRef","useState","itemName","setItemName","itemCost","setItemCost","className","ref","type","id","onChange","event","target","value","console","log","placeholder","App","pressed","setPressed","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAGaA,EAAwB,WACnC,IAAMC,EAAgBC,iBAAuB,MADJ,EAGTC,mBAAiB,IAHR,mBAGlCC,EAHkC,KAGxBC,EAHwB,OAITF,mBAAiB,IAJR,mBAIlCG,EAJkC,KAIxBC,EAJwB,KAMzC,OAEI,cADF,CACE,OAAKC,UAAU,aAAaC,IAAKR,EAAjC,UACE,sBAAKO,UAAU,WAAf,UACE,uBACEE,KAAK,OACLC,GAAG,WACHC,SAAU,SAACC,GACTR,EAAYQ,EAAMC,OAAOC,OACzBC,QAAQC,IAAIJ,EAAMC,OAAOC,MAAOX,IAElCc,YAAY,SAEd,sBAAKV,UAAU,cAAf,UACE,qBAAKG,GAAG,WAAR,oBACA,uBACED,KAAK,SACLC,GAAG,WACHC,SAAU,SAACC,GACTN,EAAYM,EAAMC,OAAOC,OACzBC,QAAQC,IAAIJ,EAAMC,OAAOC,MAAOT,IAElCY,YAAY,eAIlB,sBAAKV,UAAU,oBAAf,UACE,qBAAKG,GAAG,aAAR,kBACA,qBAAKA,GAAG,eAAR,2BCCKQ,EAlCO,WAAO,IAAD,EACIhB,mBAAiB,KADrB,mBACnBiB,EADmB,KACVC,EADU,KAG1B,OACE,sBAAKb,UAAU,MAAf,UACgB,MAAZY,GAAoB,cAAC,EAAD,IACxB,iCACE,yBAAQT,GAAG,SAAX,UACE,sCACA,qBAAKH,UAAU,eAAeG,GAAG,mBAEnC,qBAAKA,GAAG,SAAR,SACE,qBAAKA,GAAG,gBAAR,SACE,mBAAGA,GAAG,SAAN,gDAGJ,qBACQH,UAAU,YACVG,GAAG,YACHW,QAAS,WACLD,EAAwB,MAAZD,EAAkB,IAAK,KACnCJ,QAAQC,IAAI,YALxB,eAUA,yBAAQN,GAAG,SAAX,mCAC0B,mBAAGA,GAAG,6BCjBvBY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.63b77eb1.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport \"./App.css\";\n\nexport const InputDialog: React.FC = () => {\n  const valueInputdiv = useRef<HTMLDivElement>(null);\n\n  const [itemName, setItemName] = useState<string>(\"\");\n  const [itemCost, setItemCost] = useState<string>(\"\");\n\n  return (\n    // <div className=\"container\" ref={container}>\n      <div className=\"valueInput\" ref={valueInputdiv}>\n        <div className=\"itemInfo\">\n          <input\n            type=\"text\"\n            id=\"itemName\"\n            onChange={(event) => {\n              setItemName(event.target.value);\n              console.log(event.target.value, itemName);\n            }}\n            placeholder=\"item\"\n          />\n          <div className=\"itemCostDiv\">\n            <div id=\"currency\">â‚¹</div>\n            <input\n              type=\"number\"\n              id=\"itemCost\"\n              onChange={(event) => {\n                setItemCost(event.target.value);\n                console.log(event.target.value, itemCost);\n              }}\n              placeholder=\"cost\"\n            />\n          </div>\n        </div>\n        <div className=\"valueInputButtons\">\n          <div id=\"saveButton\">Save</div>\n          <div id=\"deleteButton\">Delete</div>\n        </div>\n      </div>\n    // </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { InputDialog } from \"./InputDialog\";\n\nconst App: React.FC = () => {\n  const [pressed, setPressed] = useState<string>('n');\n\n  return (\n    <div className=\"App\">\n      {(pressed === 'y') && <InputDialog />}\n    <main>\n      <header id=\"header\">\n        <p>LEGER</p>\n        <div className=\"themeChanger\" id=\"themeButton\"></div>\n      </header>\n      <div id=\"holder\">\n        <div id=\"initialAmount\">\n          <p id=\"opener\">press to enter initial balance</p>\n        </div>\n      </div>\n      <div\n              className=\"addButton\"\n              id=\"addButton\"\n              onClick={() => {\n                  setPressed((pressed === 'n')? 'y': 'n');\n                  console.log('hmmmmmm');\n              }}\n      >\n        +\n      </div>\n      <footer id=\"footer\">\n        remaining balance &nbsp;<p id=\"currentBalance\"></p>\n      </footer>\n    </main>\n</div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}